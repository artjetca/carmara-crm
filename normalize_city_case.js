import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
dotenv.config()

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

// Ê†áÂáÜÂüéÂ∏ÇÂêçÁß∞ (‰∏é‰∏ãÊãâÈÄâÂçïÂåπÈÖç)
const municipiosByProvince = {
  'C√°diz': [
    'Alcal√° de los Gazules', 'Alcal√° del Valle', 'Algar', 'Algeciras', 'Algodonales', 'Arcos de la Frontera',
    'Barbate', 'Benalup-Casas Viejas', 'Benaocaz', 'Bornos', 'El Bosque', 'C√°diz', 'Castellar de la Frontera',
    'Chiclana de la Frontera', 'Chipiona', 'Conil de la Frontera', 'Espera', 'El Gastor', 'Grazalema',
    'Jerez de la Frontera', 'Jimena de la Frontera', 'La L√≠nea de la Concepci√≥n', 'Los Barrios',
    'Medina-Sidonia', 'Olvera', 'Paterna de Rivera', 'Prado del Rey', 'El Puerto de Santa Mar√≠a',
    'Puerto Real', 'Puerto Serrano', 'Rota', 'San Fernando', 'San Jos√© del Valle', 'San Roque',
    'Sanl√∫car de Barrameda', 'Setenil de las Bodegas', 'Tarifa', 'Torre Alh√°quime', 'Trebujena',
    'Ubrique', 'Vejer de la Frontera', 'Villaluenga del Rosario', 'Villamart√≠n', 'Zahara'
  ],
  'Huelva': [
    'Al√°jar', 'Aljaraque', 'Almendro', 'Almonaster la Real', 'Almonte', 'Alosno', 'Aracena',
    'Aroche', 'Arroyomolinos de Le√≥n', 'Ayamonte', 'Beas', 'Berrocal', 'Bollullos Par del Condado',
    'Bonares', 'Cabezas Rubias', 'Cala', 'Cala√±as', 'El Campillo', 'Campofr√≠o', 'Ca√±averal de Le√≥n',
    'Cartaya', 'Casta√±o del Robledo', 'El Cerro de And√©valo', 'Corteconcepci√≥n', 'Cortegana',
    'Cortelazor', 'Cumbres de Enmedio', 'Cumbres de San Bartolom√©', 'Cumbres Mayores', 'Encinasola',
    'Escacena del Campo', 'Fuenteheridos', 'Galaroza', 'El Granado', 'La Granada de R√≠o-Tinto',
    'Gibrale√≥n', 'Higuera de la Sierra', 'Hinojales', 'Hinojos', 'Huelva', 'Isla Cristina',
    'Jabugo', 'Lepe', 'Linares de la Sierra', 'Lucena del Puerto', 'Manzanilla', 'Marines',
    'Minas de Riotinto', 'Moguer', 'La Nava', 'Nerva', 'Niebla', 'Palos de la Frontera',
    'La Palma del Condado', 'Paterna del Campo', 'Paymogo', 'Puebla de Guzm√°n', 'Puerto Moral',
    'Punta Umbr√≠a', 'Rociana del Condado', 'Rosal de la Frontera', 'San Bartolom√© de la Torre',
    'San Juan del Puerto', 'San Silvestre de Guzm√°n', 'Sanl√∫car de Guadiana', 'Santa Ana la Real',
    'Santa B√°rbara de Casa', 'Santa Olalla del Cala', 'Trigueros', 'Valdelarco', 'Valverde del Camino',
    'Villablanca', 'Villalba del Alcor', 'Villanueva de las Cruces', 'Villanueva de los Castillejos',
    'Villarrasa', 'Zalamea la Real', 'Zufre'
  ],
  'Ceuta': ['Ceuta']
}

// ÂàõÂª∫ÊâÄÊúâÊ†áÂáÜÂüéÂ∏ÇÂêçÁß∞ÁöÑÊò†Â∞Ñ
const allStandardCities = new Map()
Object.values(municipiosByProvince).flat().forEach(city => {
  allStandardCities.set(city.toLowerCase(), city)
})

async function normalizeCityCase() {
  try {
    console.log('üîß Normalizing city case to match dropdown options...\n')

    // 1. Ëé∑ÂèñÊâÄÊúâÈúÄË¶Å‰øÆÊ≠£ÁöÑÂÆ¢Êà∑
    const { data: customers, error: fetchError } = await supabase
      .from('customers')
      .select('id, name, city, province')
      .not('city', 'is', null)

    if (fetchError) {
      console.log('‚ùå Error fetching customers:', fetchError.message)
      return
    }

    console.log(`üìã Found ${customers.length} customers with city data`)

    let updatedCount = 0
    let errors = 0

    // 2. Ê£ÄÊü•Âíå‰øÆÊ≠£ÊØè‰∏™ÂÆ¢Êà∑ÁöÑÂüéÂ∏ÇÂêçÁß∞
    for (const customer of customers) {
      try {
        const currentCity = customer.city.trim()
        const standardCity = allStandardCities.get(currentCity.toLowerCase())

        if (standardCity && standardCity !== currentCity) {
          // Need to update city name
          const { error: updateError } = await supabase
            .from('customers')
            .update({ city: standardCity })
            .eq('id', customer.id)

          if (updateError) {
            console.log(`‚ùå Error updating ${customer.name}:`, updateError.message)
            errors++
          } else {
            console.log(`‚úÖ Updated: ${customer.name}`)
            console.log(`   "${currentCity}" ‚Üí "${standardCity}"`)
            updatedCount++
          }
        }
      } catch (error) {
        console.log(`‚ùå Error processing customer ${customer.name}:`, error.message)
        errors++
      }
    }

    console.log(`\nüéâ City normalization completed!`)
    console.log(`‚úÖ Updated: ${updatedCount} customers`)
    console.log(`‚ùå Errors: ${errors} customers`)

    // 3. Show remaining unmatched cities
    const unmatchedCities = new Set()
    customers.forEach(customer => {
      const cityLower = customer.city.toLowerCase()
      if (!allStandardCities.has(cityLower)) {
        unmatchedCities.add(customer.city)
      }
    })

    if (unmatchedCities.size > 0) {
      console.log(`\n‚ö†Ô∏è  Cities that don't match standard list:`)
      for (const city of unmatchedCities) {
        const count = customers.filter(c => c.city === city).length
        console.log(`   "${city}" - ${count} customers`)
      }
    }

  } catch (error) {
    console.error('‚ùå Script error:', error)
  }
}

normalizeCityCase()
